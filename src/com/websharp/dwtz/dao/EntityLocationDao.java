package com.websharp.dwtz.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dwtz.dao.EntityLocation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_LOCATION.
*/
public class EntityLocationDao extends AbstractDao<EntityLocation, Void> {

    public static final String TABLENAME = "ENTITY_LOCATION";

    /**
     * Properties of entity EntityLocation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Integer.class, "ID", false, "ID");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property TraName = new Property(2, String.class, "TraName", false, "TRA_NAME");
        public final static Property EName = new Property(3, String.class, "EName", false, "ENAME");
        public final static Property ParentID = new Property(4, Integer.class, "ParentID", false, "PARENT_ID");
        public final static Property LocationLevel = new Property(5, Integer.class, "LocationLevel", false, "LOCATION_LEVEL");
    };


    public EntityLocationDao(DaoConfig config) {
        super(config);
    }
    
    public EntityLocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_LOCATION' (" + //
                "'ID' INTEGER," + // 0: ID
                "'NAME' TEXT," + // 1: Name
                "'TRA_NAME' TEXT," + // 2: TraName
                "'ENAME' TEXT," + // 3: EName
                "'PARENT_ID' INTEGER," + // 4: ParentID
                "'LOCATION_LEVEL' INTEGER);"); // 5: LocationLevel
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_LOCATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityLocation entity) {
        stmt.clearBindings();
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String TraName = entity.getTraName();
        if (TraName != null) {
            stmt.bindString(3, TraName);
        }
 
        String EName = entity.getEName();
        if (EName != null) {
            stmt.bindString(4, EName);
        }
 
        Integer ParentID = entity.getParentID();
        if (ParentID != null) {
            stmt.bindLong(5, ParentID);
        }
 
        Integer LocationLevel = entity.getLocationLevel();
        if (LocationLevel != null) {
            stmt.bindLong(6, LocationLevel);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityLocation readEntity(Cursor cursor, int offset) {
        EntityLocation entity = new EntityLocation( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TraName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // ParentID
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // LocationLevel
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityLocation entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTraName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParentID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLocationLevel(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityLocation entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityLocation entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
