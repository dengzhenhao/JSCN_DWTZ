package com.websharp.dwtz.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.websharp.dwtz.dao.EntityUserDao;
import com.websharp.dwtz.dao.EntityQuarantineDao;
import com.websharp.dwtz.dao.EntityUnqualiedDao;
import com.websharp.dwtz.dao.EntityArticleDao;
import com.websharp.dwtz.dao.EntityButcheryGroupDao;
import com.websharp.dwtz.dao.EntityButcheryDao;
import com.websharp.dwtz.dao.EntityDestroyDao;
import com.websharp.dwtz.dao.EntityVersionDao;
import com.websharp.dwtz.dao.EntityCommonDataDao;
import com.websharp.dwtz.dao.EntityDistributionApplyDao;
import com.websharp.dwtz.dao.EntityDistributionApplyTargetDao;
import com.websharp.dwtz.dao.EntityLocationDao;
import com.websharp.dwtz.dao.EntityAnimalSlaughterImmuneApplyDao;
import com.websharp.dwtz.dao.EntityModuleDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1000): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1000;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        EntityUserDao.createTable(db, ifNotExists);
        EntityQuarantineDao.createTable(db, ifNotExists);
        EntityUnqualiedDao.createTable(db, ifNotExists);
        EntityArticleDao.createTable(db, ifNotExists);
        EntityButcheryGroupDao.createTable(db, ifNotExists);
        EntityButcheryDao.createTable(db, ifNotExists);
        EntityDestroyDao.createTable(db, ifNotExists);
        EntityVersionDao.createTable(db, ifNotExists);
        EntityCommonDataDao.createTable(db, ifNotExists);
        EntityDistributionApplyDao.createTable(db, ifNotExists);
        EntityDistributionApplyTargetDao.createTable(db, ifNotExists);
        EntityLocationDao.createTable(db, ifNotExists);
        EntityAnimalSlaughterImmuneApplyDao.createTable(db, ifNotExists);
        EntityModuleDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        EntityUserDao.dropTable(db, ifExists);
        EntityQuarantineDao.dropTable(db, ifExists);
        EntityUnqualiedDao.dropTable(db, ifExists);
        EntityArticleDao.dropTable(db, ifExists);
        EntityButcheryGroupDao.dropTable(db, ifExists);
        EntityButcheryDao.dropTable(db, ifExists);
        EntityDestroyDao.dropTable(db, ifExists);
        EntityVersionDao.dropTable(db, ifExists);
        EntityCommonDataDao.dropTable(db, ifExists);
        EntityDistributionApplyDao.dropTable(db, ifExists);
        EntityDistributionApplyTargetDao.dropTable(db, ifExists);
        EntityLocationDao.dropTable(db, ifExists);
        EntityAnimalSlaughterImmuneApplyDao.dropTable(db, ifExists);
        EntityModuleDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(EntityUserDao.class);
        registerDaoClass(EntityQuarantineDao.class);
        registerDaoClass(EntityUnqualiedDao.class);
        registerDaoClass(EntityArticleDao.class);
        registerDaoClass(EntityButcheryGroupDao.class);
        registerDaoClass(EntityButcheryDao.class);
        registerDaoClass(EntityDestroyDao.class);
        registerDaoClass(EntityVersionDao.class);
        registerDaoClass(EntityCommonDataDao.class);
        registerDaoClass(EntityDistributionApplyDao.class);
        registerDaoClass(EntityDistributionApplyTargetDao.class);
        registerDaoClass(EntityLocationDao.class);
        registerDaoClass(EntityAnimalSlaughterImmuneApplyDao.class);
        registerDaoClass(EntityModuleDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
