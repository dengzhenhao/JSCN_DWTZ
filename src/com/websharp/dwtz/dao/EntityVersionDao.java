package com.websharp.dwtz.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dwtz.dao.EntityVersion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_VERSION.
*/
public class EntityVersionDao extends AbstractDao<EntityVersion, Void> {

    public static final String TABLENAME = "ENTITY_VERSION";

    /**
     * Properties of entity EntityVersion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, String.class, "InnerID", false, "INNER_ID");
        public final static Property VersionName = new Property(1, String.class, "VersionName", false, "VERSION_NAME");
        public final static Property VersionCode = new Property(2, String.class, "VersionCode", false, "VERSION_CODE");
        public final static Property DownloadUrl = new Property(3, String.class, "DownloadUrl", false, "DOWNLOAD_URL");
        public final static Property UpdateContent = new Property(4, String.class, "UpdateContent", false, "UPDATE_CONTENT");
        public final static Property Enable = new Property(5, String.class, "Enable", false, "ENABLE");
        public final static Property Add_UserID = new Property(6, String.class, "Add_UserID", false, "ADD__USER_ID");
        public final static Property Add_Time = new Property(7, String.class, "Add_Time", false, "ADD__TIME");
        public final static Property Add_IP = new Property(8, String.class, "Add_IP", false, "ADD__IP");
        public final static Property Update_UserID = new Property(9, String.class, "Update_UserID", false, "UPDATE__USER_ID");
        public final static Property Update_Time = new Property(10, String.class, "Update_Time", false, "UPDATE__TIME");
        public final static Property Update_IP = new Property(11, String.class, "Update_IP", false, "UPDATE__IP");
    };


    public EntityVersionDao(DaoConfig config) {
        super(config);
    }
    
    public EntityVersionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_VERSION' (" + //
                "'INNER_ID' TEXT," + // 0: InnerID
                "'VERSION_NAME' TEXT," + // 1: VersionName
                "'VERSION_CODE' TEXT," + // 2: VersionCode
                "'DOWNLOAD_URL' TEXT," + // 3: DownloadUrl
                "'UPDATE_CONTENT' TEXT," + // 4: UpdateContent
                "'ENABLE' TEXT," + // 5: Enable
                "'ADD__USER_ID' TEXT," + // 6: Add_UserID
                "'ADD__TIME' TEXT," + // 7: Add_Time
                "'ADD__IP' TEXT," + // 8: Add_IP
                "'UPDATE__USER_ID' TEXT," + // 9: Update_UserID
                "'UPDATE__TIME' TEXT," + // 10: Update_Time
                "'UPDATE__IP' TEXT);"); // 11: Update_IP
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_VERSION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityVersion entity) {
        stmt.clearBindings();
 
        String InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindString(1, InnerID);
        }
 
        String VersionName = entity.getVersionName();
        if (VersionName != null) {
            stmt.bindString(2, VersionName);
        }
 
        String VersionCode = entity.getVersionCode();
        if (VersionCode != null) {
            stmt.bindString(3, VersionCode);
        }
 
        String DownloadUrl = entity.getDownloadUrl();
        if (DownloadUrl != null) {
            stmt.bindString(4, DownloadUrl);
        }
 
        String UpdateContent = entity.getUpdateContent();
        if (UpdateContent != null) {
            stmt.bindString(5, UpdateContent);
        }
 
        String Enable = entity.getEnable();
        if (Enable != null) {
            stmt.bindString(6, Enable);
        }
 
        String Add_UserID = entity.getAdd_UserID();
        if (Add_UserID != null) {
            stmt.bindString(7, Add_UserID);
        }
 
        String Add_Time = entity.getAdd_Time();
        if (Add_Time != null) {
            stmt.bindString(8, Add_Time);
        }
 
        String Add_IP = entity.getAdd_IP();
        if (Add_IP != null) {
            stmt.bindString(9, Add_IP);
        }
 
        String Update_UserID = entity.getUpdate_UserID();
        if (Update_UserID != null) {
            stmt.bindString(10, Update_UserID);
        }
 
        String Update_Time = entity.getUpdate_Time();
        if (Update_Time != null) {
            stmt.bindString(11, Update_Time);
        }
 
        String Update_IP = entity.getUpdate_IP();
        if (Update_IP != null) {
            stmt.bindString(12, Update_IP);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityVersion readEntity(Cursor cursor, int offset) {
        EntityVersion entity = new EntityVersion( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // VersionName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // VersionCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DownloadUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UpdateContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Enable
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Add_UserID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Add_Time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Add_IP
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Update_UserID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Update_Time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // Update_IP
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityVersion entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVersionName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVersionCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDownloadUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnable(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAdd_UserID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdd_Time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAdd_IP(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdate_UserID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdate_Time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdate_IP(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityVersion entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityVersion entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
