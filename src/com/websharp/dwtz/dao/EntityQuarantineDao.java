package com.websharp.dwtz.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dwtz.dao.EntityQuarantine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_QUARANTINE.
*/
public class EntityQuarantineDao extends AbstractDao<EntityQuarantine, Void> {

    public static final String TABLENAME = "ENTITY_QUARANTINE";

    /**
     * Properties of entity EntityQuarantine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, String.class, "InnerID", false, "INNER_ID");
        public final static Property ButcheryID = new Property(1, String.class, "ButcheryID", false, "BUTCHERY_ID");
        public final static Property DeliveryNum = new Property(2, String.class, "DeliveryNum", false, "DELIVERY_NUM");
        public final static Property SendTime = new Property(3, String.class, "SendTime", false, "SEND_TIME");
        public final static Property GoodsOwner = new Property(4, String.class, "GoodsOwner", false, "GOODS_OWNER");
        public final static Property Origin = new Property(5, String.class, "Origin", false, "ORIGIN");
        public final static Property QuarantineNum = new Property(6, String.class, "QuarantineNum", false, "QUARANTINE_NUM");
        public final static Property QuarantineCount = new Property(7, String.class, "QuarantineCount", false, "QUARANTINE_COUNT");
        public final static Property ActualCount = new Property(8, String.class, "ActualCount", false, "ACTUAL_COUNT");
        public final static Property ImmuneTag = new Property(9, String.class, "ImmuneTag", false, "IMMUNE_TAG");
        public final static Property CheckCount = new Property(10, String.class, "CheckCount", false, "CHECK_COUNT");
        public final static Property CheckNegativeCount = new Property(11, String.class, "CheckNegativeCount", false, "CHECK_NEGATIVE_COUNT");
        public final static Property CheckPositiveCount = new Property(12, String.class, "CheckPositiveCount", false, "CHECK_POSITIVE_COUNT");
        public final static Property UnqualiedCount = new Property(13, String.class, "UnqualiedCount", false, "UNQUALIED_COUNT");
        public final static Property QualiedCount = new Property(14, String.class, "QualiedCount", false, "QUALIED_COUNT");
        public final static Property ProcessReason = new Property(15, String.class, "ProcessReason", false, "PROCESS_REASON");
        public final static Property ProcessComment = new Property(16, String.class, "ProcessComment", false, "PROCESS_COMMENT");
        public final static Property OfficalVeterSign = new Property(17, String.class, "OfficalVeterSign", false, "OFFICAL_VETER_SIGN");
        public final static Property Remark = new Property(18, String.class, "Remark", false, "REMARK");
        public final static Property Add_UserID = new Property(19, String.class, "Add_UserID", false, "ADD__USER_ID");
        public final static Property Add_Time = new Property(20, String.class, "Add_Time", false, "ADD__TIME");
        public final static Property Add_IP = new Property(21, String.class, "Add_IP", false, "ADD__IP");
        public final static Property Update_UserID = new Property(22, String.class, "Update_UserID", false, "UPDATE__USER_ID");
        public final static Property Update_Time = new Property(23, String.class, "Update_Time", false, "UPDATE__TIME");
        public final static Property Update_IP = new Property(24, String.class, "Update_IP", false, "UPDATE__IP");
        public final static Property StaffNo = new Property(25, String.class, "StaffNo", false, "STAFF_NO");
        public final static Property PicBatchID = new Property(26, String.class, "PicBatchID", false, "PIC_BATCH_ID");
        public final static Property Origin_province_id = new Property(27, String.class, "origin_province_id", false, "ORIGIN_PROVINCE_ID");
        public final static Property Origin_city_id = new Property(28, String.class, "origin_city_id", false, "ORIGIN_CITY_ID");
        public final static Property Origin_county_id = new Property(29, String.class, "origin_county_id", false, "ORIGIN_COUNTY_ID");
        public final static Property Animal_type = new Property(30, String.class, "animal_type", false, "ANIMAL_TYPE");
    };


    public EntityQuarantineDao(DaoConfig config) {
        super(config);
    }
    
    public EntityQuarantineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_QUARANTINE' (" + //
                "'INNER_ID' TEXT," + // 0: InnerID
                "'BUTCHERY_ID' TEXT," + // 1: ButcheryID
                "'DELIVERY_NUM' TEXT," + // 2: DeliveryNum
                "'SEND_TIME' TEXT," + // 3: SendTime
                "'GOODS_OWNER' TEXT," + // 4: GoodsOwner
                "'ORIGIN' TEXT," + // 5: Origin
                "'QUARANTINE_NUM' TEXT," + // 6: QuarantineNum
                "'QUARANTINE_COUNT' TEXT," + // 7: QuarantineCount
                "'ACTUAL_COUNT' TEXT," + // 8: ActualCount
                "'IMMUNE_TAG' TEXT," + // 9: ImmuneTag
                "'CHECK_COUNT' TEXT," + // 10: CheckCount
                "'CHECK_NEGATIVE_COUNT' TEXT," + // 11: CheckNegativeCount
                "'CHECK_POSITIVE_COUNT' TEXT," + // 12: CheckPositiveCount
                "'UNQUALIED_COUNT' TEXT," + // 13: UnqualiedCount
                "'QUALIED_COUNT' TEXT," + // 14: QualiedCount
                "'PROCESS_REASON' TEXT," + // 15: ProcessReason
                "'PROCESS_COMMENT' TEXT," + // 16: ProcessComment
                "'OFFICAL_VETER_SIGN' TEXT," + // 17: OfficalVeterSign
                "'REMARK' TEXT," + // 18: Remark
                "'ADD__USER_ID' TEXT," + // 19: Add_UserID
                "'ADD__TIME' TEXT," + // 20: Add_Time
                "'ADD__IP' TEXT," + // 21: Add_IP
                "'UPDATE__USER_ID' TEXT," + // 22: Update_UserID
                "'UPDATE__TIME' TEXT," + // 23: Update_Time
                "'UPDATE__IP' TEXT," + // 24: Update_IP
                "'STAFF_NO' TEXT," + // 25: StaffNo
                "'PIC_BATCH_ID' TEXT," + // 26: PicBatchID
                "'ORIGIN_PROVINCE_ID' TEXT," + // 27: origin_province_id
                "'ORIGIN_CITY_ID' TEXT," + // 28: origin_city_id
                "'ORIGIN_COUNTY_ID' TEXT," + // 29: origin_county_id
                "'ANIMAL_TYPE' TEXT);"); // 30: animal_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_QUARANTINE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityQuarantine entity) {
        stmt.clearBindings();
 
        String InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindString(1, InnerID);
        }
 
        String ButcheryID = entity.getButcheryID();
        if (ButcheryID != null) {
            stmt.bindString(2, ButcheryID);
        }
 
        String DeliveryNum = entity.getDeliveryNum();
        if (DeliveryNum != null) {
            stmt.bindString(3, DeliveryNum);
        }
 
        String SendTime = entity.getSendTime();
        if (SendTime != null) {
            stmt.bindString(4, SendTime);
        }
 
        String GoodsOwner = entity.getGoodsOwner();
        if (GoodsOwner != null) {
            stmt.bindString(5, GoodsOwner);
        }
 
        String Origin = entity.getOrigin();
        if (Origin != null) {
            stmt.bindString(6, Origin);
        }
 
        String QuarantineNum = entity.getQuarantineNum();
        if (QuarantineNum != null) {
            stmt.bindString(7, QuarantineNum);
        }
 
        String QuarantineCount = entity.getQuarantineCount();
        if (QuarantineCount != null) {
            stmt.bindString(8, QuarantineCount);
        }
 
        String ActualCount = entity.getActualCount();
        if (ActualCount != null) {
            stmt.bindString(9, ActualCount);
        }
 
        String ImmuneTag = entity.getImmuneTag();
        if (ImmuneTag != null) {
            stmt.bindString(10, ImmuneTag);
        }
 
        String CheckCount = entity.getCheckCount();
        if (CheckCount != null) {
            stmt.bindString(11, CheckCount);
        }
 
        String CheckNegativeCount = entity.getCheckNegativeCount();
        if (CheckNegativeCount != null) {
            stmt.bindString(12, CheckNegativeCount);
        }
 
        String CheckPositiveCount = entity.getCheckPositiveCount();
        if (CheckPositiveCount != null) {
            stmt.bindString(13, CheckPositiveCount);
        }
 
        String UnqualiedCount = entity.getUnqualiedCount();
        if (UnqualiedCount != null) {
            stmt.bindString(14, UnqualiedCount);
        }
 
        String QualiedCount = entity.getQualiedCount();
        if (QualiedCount != null) {
            stmt.bindString(15, QualiedCount);
        }
 
        String ProcessReason = entity.getProcessReason();
        if (ProcessReason != null) {
            stmt.bindString(16, ProcessReason);
        }
 
        String ProcessComment = entity.getProcessComment();
        if (ProcessComment != null) {
            stmt.bindString(17, ProcessComment);
        }
 
        String OfficalVeterSign = entity.getOfficalVeterSign();
        if (OfficalVeterSign != null) {
            stmt.bindString(18, OfficalVeterSign);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(19, Remark);
        }
 
        String Add_UserID = entity.getAdd_UserID();
        if (Add_UserID != null) {
            stmt.bindString(20, Add_UserID);
        }
 
        String Add_Time = entity.getAdd_Time();
        if (Add_Time != null) {
            stmt.bindString(21, Add_Time);
        }
 
        String Add_IP = entity.getAdd_IP();
        if (Add_IP != null) {
            stmt.bindString(22, Add_IP);
        }
 
        String Update_UserID = entity.getUpdate_UserID();
        if (Update_UserID != null) {
            stmt.bindString(23, Update_UserID);
        }
 
        String Update_Time = entity.getUpdate_Time();
        if (Update_Time != null) {
            stmt.bindString(24, Update_Time);
        }
 
        String Update_IP = entity.getUpdate_IP();
        if (Update_IP != null) {
            stmt.bindString(25, Update_IP);
        }
 
        String StaffNo = entity.getStaffNo();
        if (StaffNo != null) {
            stmt.bindString(26, StaffNo);
        }
 
        String PicBatchID = entity.getPicBatchID();
        if (PicBatchID != null) {
            stmt.bindString(27, PicBatchID);
        }
 
        String origin_province_id = entity.getOrigin_province_id();
        if (origin_province_id != null) {
            stmt.bindString(28, origin_province_id);
        }
 
        String origin_city_id = entity.getOrigin_city_id();
        if (origin_city_id != null) {
            stmt.bindString(29, origin_city_id);
        }
 
        String origin_county_id = entity.getOrigin_county_id();
        if (origin_county_id != null) {
            stmt.bindString(30, origin_county_id);
        }
 
        String animal_type = entity.getAnimal_type();
        if (animal_type != null) {
            stmt.bindString(31, animal_type);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityQuarantine readEntity(Cursor cursor, int offset) {
        EntityQuarantine entity = new EntityQuarantine( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ButcheryID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DeliveryNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SendTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // GoodsOwner
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Origin
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // QuarantineNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // QuarantineCount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ActualCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ImmuneTag
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CheckCount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // CheckNegativeCount
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // CheckPositiveCount
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // UnqualiedCount
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // QualiedCount
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ProcessReason
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ProcessComment
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // OfficalVeterSign
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Remark
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // Add_UserID
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // Add_Time
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Add_IP
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // Update_UserID
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // Update_Time
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // Update_IP
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // StaffNo
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // PicBatchID
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // origin_province_id
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // origin_city_id
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // origin_county_id
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30) // animal_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityQuarantine entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setButcheryID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeliveryNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSendTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoodsOwner(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrigin(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQuarantineNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQuarantineCount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setActualCount(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImmuneTag(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCheckCount(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCheckNegativeCount(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCheckPositiveCount(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUnqualiedCount(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setQualiedCount(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProcessReason(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setProcessComment(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOfficalVeterSign(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRemark(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAdd_UserID(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAdd_Time(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAdd_IP(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUpdate_UserID(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUpdate_Time(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setUpdate_IP(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setStaffNo(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPicBatchID(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setOrigin_province_id(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setOrigin_city_id(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setOrigin_county_id(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setAnimal_type(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityQuarantine entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityQuarantine entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
