package com.websharp.dwtz.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dwtz.dao.EntitySlaughter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_SLAUGHTER.
*/
public class EntitySlaughterDao extends AbstractDao<EntitySlaughter, Void> {

    public static final String TABLENAME = "ENTITY_SLAUGHTER";

    /**
     * Properties of entity EntitySlaughter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Innerid = new Property(0, String.class, "innerid", false, "INNERID");
        public final static Property Quarantine_id = new Property(1, String.class, "quarantine_id", false, "QUARANTINE_ID");
        public final static Property Qualied_count = new Property(2, Integer.class, "qualied_count", false, "QUALIED_COUNT");
        public final static Property Unqualied_count = new Property(3, Integer.class, "unqualied_count", false, "UNQUALIED_COUNT");
        public final static Property Slaughter_time = new Property(4, String.class, "slaughter_time", false, "SLAUGHTER_TIME");
        public final static Property Whereabouts = new Property(5, String.class, "whereabouts", false, "WHEREABOUTS");
        public final static Property Immune_num = new Property(6, String.class, "immune_num", false, "IMMUNE_NUM");
        public final static Property Add_UserID = new Property(7, String.class, "Add_UserID", false, "ADD__USER_ID");
        public final static Property Add_Time = new Property(8, String.class, "Add_Time", false, "ADD__TIME");
        public final static Property Add_IP = new Property(9, String.class, "Add_IP", false, "ADD__IP");
        public final static Property Update_UserID = new Property(10, String.class, "Update_UserID", false, "UPDATE__USER_ID");
        public final static Property Update_Time = new Property(11, String.class, "Update_Time", false, "UPDATE__TIME");
        public final static Property Update_IP = new Property(12, String.class, "Update_IP", false, "UPDATE__IP");
        public final static Property Butchery_id = new Property(13, String.class, "butchery_id", false, "BUTCHERY_ID");
        public final static Property Actual_kill_count = new Property(14, String.class, "actual_kill_count", false, "ACTUAL_KILL_COUNT");
        public final static Property Rest_count = new Property(15, String.class, "rest_count", false, "REST_COUNT");
        public final static Property Is_rest_count_merge = new Property(16, String.class, "is_rest_count_merge", false, "IS_REST_COUNT_MERGE");
        public final static Property Apply_user_name = new Property(17, String.class, "apply_user_name", false, "APPLY_USER_NAME");
    };


    public EntitySlaughterDao(DaoConfig config) {
        super(config);
    }
    
    public EntitySlaughterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_SLAUGHTER' (" + //
                "'INNERID' TEXT," + // 0: innerid
                "'QUARANTINE_ID' TEXT," + // 1: quarantine_id
                "'QUALIED_COUNT' INTEGER," + // 2: qualied_count
                "'UNQUALIED_COUNT' INTEGER," + // 3: unqualied_count
                "'SLAUGHTER_TIME' TEXT," + // 4: slaughter_time
                "'WHEREABOUTS' TEXT," + // 5: whereabouts
                "'IMMUNE_NUM' TEXT," + // 6: immune_num
                "'ADD__USER_ID' TEXT," + // 7: Add_UserID
                "'ADD__TIME' TEXT," + // 8: Add_Time
                "'ADD__IP' TEXT," + // 9: Add_IP
                "'UPDATE__USER_ID' TEXT," + // 10: Update_UserID
                "'UPDATE__TIME' TEXT," + // 11: Update_Time
                "'UPDATE__IP' TEXT," + // 12: Update_IP
                "'BUTCHERY_ID' TEXT," + // 13: butchery_id
                "'ACTUAL_KILL_COUNT' TEXT," + // 14: actual_kill_count
                "'REST_COUNT' TEXT," + // 15: rest_count
                "'IS_REST_COUNT_MERGE' TEXT," + // 16: is_rest_count_merge
                "'APPLY_USER_NAME' TEXT);"); // 17: apply_user_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_SLAUGHTER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntitySlaughter entity) {
        stmt.clearBindings();
 
        String innerid = entity.getInnerid();
        if (innerid != null) {
            stmt.bindString(1, innerid);
        }
 
        String quarantine_id = entity.getQuarantine_id();
        if (quarantine_id != null) {
            stmt.bindString(2, quarantine_id);
        }
 
        Integer qualied_count = entity.getQualied_count();
        if (qualied_count != null) {
            stmt.bindLong(3, qualied_count);
        }
 
        Integer unqualied_count = entity.getUnqualied_count();
        if (unqualied_count != null) {
            stmt.bindLong(4, unqualied_count);
        }
 
        String slaughter_time = entity.getSlaughter_time();
        if (slaughter_time != null) {
            stmt.bindString(5, slaughter_time);
        }
 
        String whereabouts = entity.getWhereabouts();
        if (whereabouts != null) {
            stmt.bindString(6, whereabouts);
        }
 
        String immune_num = entity.getImmune_num();
        if (immune_num != null) {
            stmt.bindString(7, immune_num);
        }
 
        String Add_UserID = entity.getAdd_UserID();
        if (Add_UserID != null) {
            stmt.bindString(8, Add_UserID);
        }
 
        String Add_Time = entity.getAdd_Time();
        if (Add_Time != null) {
            stmt.bindString(9, Add_Time);
        }
 
        String Add_IP = entity.getAdd_IP();
        if (Add_IP != null) {
            stmt.bindString(10, Add_IP);
        }
 
        String Update_UserID = entity.getUpdate_UserID();
        if (Update_UserID != null) {
            stmt.bindString(11, Update_UserID);
        }
 
        String Update_Time = entity.getUpdate_Time();
        if (Update_Time != null) {
            stmt.bindString(12, Update_Time);
        }
 
        String Update_IP = entity.getUpdate_IP();
        if (Update_IP != null) {
            stmt.bindString(13, Update_IP);
        }
 
        String butchery_id = entity.getButchery_id();
        if (butchery_id != null) {
            stmt.bindString(14, butchery_id);
        }
 
        String actual_kill_count = entity.getActual_kill_count();
        if (actual_kill_count != null) {
            stmt.bindString(15, actual_kill_count);
        }
 
        String rest_count = entity.getRest_count();
        if (rest_count != null) {
            stmt.bindString(16, rest_count);
        }
 
        String is_rest_count_merge = entity.getIs_rest_count_merge();
        if (is_rest_count_merge != null) {
            stmt.bindString(17, is_rest_count_merge);
        }
 
        String apply_user_name = entity.getApply_user_name();
        if (apply_user_name != null) {
            stmt.bindString(18, apply_user_name);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntitySlaughter readEntity(Cursor cursor, int offset) {
        EntitySlaughter entity = new EntitySlaughter( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // innerid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // quarantine_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // qualied_count
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // unqualied_count
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // slaughter_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // whereabouts
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // immune_num
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Add_UserID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Add_Time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Add_IP
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Update_UserID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Update_Time
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Update_IP
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // butchery_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // actual_kill_count
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // rest_count
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // is_rest_count_merge
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // apply_user_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntitySlaughter entity, int offset) {
        entity.setInnerid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setQuarantine_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQualied_count(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setUnqualied_count(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSlaughter_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWhereabouts(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImmune_num(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdd_UserID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAdd_Time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAdd_IP(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdate_UserID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdate_Time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdate_IP(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setButchery_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setActual_kill_count(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRest_count(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIs_rest_count_merge(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setApply_user_name(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntitySlaughter entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntitySlaughter entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
