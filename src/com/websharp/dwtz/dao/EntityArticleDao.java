package com.websharp.dwtz.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dwtz.dao.EntityArticle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_ARTICLE.
*/
public class EntityArticleDao extends AbstractDao<EntityArticle, Void> {

    public static final String TABLENAME = "ENTITY_ARTICLE";

    /**
     * Properties of entity EntityArticle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, String.class, "InnerID", false, "INNER_ID");
        public final static Property Title = new Property(1, String.class, "Title", false, "TITLE");
        public final static Property ArticleContent = new Property(2, String.class, "ArticleContent", false, "ARTICLE_CONTENT");
        public final static Property CutPath = new Property(3, String.class, "CutPath", false, "CUT_PATH");
        public final static Property PublishTime = new Property(4, String.class, "PublishTime", false, "PUBLISH_TIME");
    };


    public EntityArticleDao(DaoConfig config) {
        super(config);
    }
    
    public EntityArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_ARTICLE' (" + //
                "'INNER_ID' TEXT," + // 0: InnerID
                "'TITLE' TEXT," + // 1: Title
                "'ARTICLE_CONTENT' TEXT," + // 2: ArticleContent
                "'CUT_PATH' TEXT," + // 3: CutPath
                "'PUBLISH_TIME' TEXT);"); // 4: PublishTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_ARTICLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityArticle entity) {
        stmt.clearBindings();
 
        String InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindString(1, InnerID);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(2, Title);
        }
 
        String ArticleContent = entity.getArticleContent();
        if (ArticleContent != null) {
            stmt.bindString(3, ArticleContent);
        }
 
        String CutPath = entity.getCutPath();
        if (CutPath != null) {
            stmt.bindString(4, CutPath);
        }
 
        String PublishTime = entity.getPublishTime();
        if (PublishTime != null) {
            stmt.bindString(5, PublishTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityArticle readEntity(Cursor cursor, int offset) {
        EntityArticle entity = new EntityArticle( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ArticleContent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CutPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // PublishTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityArticle entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArticleContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCutPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPublishTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityArticle entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityArticle entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
