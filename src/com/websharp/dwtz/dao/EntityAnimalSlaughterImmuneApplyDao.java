package com.websharp.dwtz.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dwtz.dao.EntityAnimalSlaughterImmuneApply;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_ANIMAL_SLAUGHTER_IMMUNE_APPLY.
*/
public class EntityAnimalSlaughterImmuneApplyDao extends AbstractDao<EntityAnimalSlaughterImmuneApply, Void> {

    public static final String TABLENAME = "ENTITY_ANIMAL_SLAUGHTER_IMMUNE_APPLY";

    /**
     * Properties of entity EntityAnimalSlaughterImmuneApply.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Innerid = new Property(0, String.class, "innerid", false, "INNERID");
        public final static Property Apply_user_name = new Property(1, String.class, "apply_user_name", false, "APPLY_USER_NAME");
        public final static Property Apply_time = new Property(2, String.class, "apply_time", false, "APPLY_TIME");
        public final static Property Inspection_staff = new Property(3, String.class, "inspection_staff", false, "INSPECTION_STAFF");
        public final static Property Inspection_staff_telephone = new Property(4, String.class, "inspection_staff_telephone", false, "INSPECTION_STAFF_TELEPHONE");
        public final static Property Animal_type = new Property(5, String.class, "animal_type", false, "ANIMAL_TYPE");
        public final static Property Animal_count = new Property(6, String.class, "animal_count", false, "ANIMAL_COUNT");
        public final static Property Animal_origin = new Property(7, String.class, "animal_origin", false, "ANIMAL_ORIGIN");
        public final static Property Entrance_immune_num = new Property(8, String.class, "entrance_immune_num", false, "ENTRANCE_IMMUNE_NUM");
        public final static Property Is_special_channel_in = new Property(9, String.class, "is_special_channel_in", false, "IS_SPECIAL_CHANNEL_IN");
        public final static Property Clinic_health = new Property(10, String.class, "clinic_health", false, "CLINIC_HEALTH");
        public final static Property Is_animal_ear_tag = new Property(11, String.class, "is_animal_ear_tag", false, "IS_ANIMAL_EAR_TAG");
        public final static Property Target_address = new Property(12, String.class, "target_address", false, "TARGET_ADDRESS");
        public final static Property Start_trans_time = new Property(13, String.class, "start_trans_time", false, "START_TRANS_TIME");
        public final static Property Is_read_warn = new Property(14, String.class, "is_read_warn", false, "IS_READ_WARN");
        public final static Property Confirm_status = new Property(15, String.class, "confirm_status", false, "CONFIRM_STATUS");
        public final static Property Do_check_time = new Property(16, String.class, "do_check_time", false, "DO_CHECK_TIME");
        public final static Property Do_check_address = new Property(17, String.class, "do_check_address", false, "DO_CHECK_ADDRESS");
        public final static Property Reject_reason = new Property(18, String.class, "reject_reason", false, "REJECT_REASON");
        public final static Property Confirm_user_name = new Property(19, String.class, "confirm_user_name", false, "CONFIRM_USER_NAME");
        public final static Property Add_UserID = new Property(20, String.class, "Add_UserID", false, "ADD__USER_ID");
        public final static Property Add_Time = new Property(21, String.class, "Add_Time", false, "ADD__TIME");
        public final static Property Add_IP = new Property(22, String.class, "Add_IP", false, "ADD__IP");
        public final static Property Update_UserID = new Property(23, String.class, "Update_UserID", false, "UPDATE__USER_ID");
        public final static Property Update_Time = new Property(24, String.class, "Update_Time", false, "UPDATE__TIME");
        public final static Property Update_IP = new Property(25, String.class, "Update_IP", false, "UPDATE__IP");
        public final static Property Inventory = new Property(26, String.class, "Inventory", false, "INVENTORY");
        public final static Property InventoryStatus = new Property(27, String.class, "InventoryStatus", false, "INVENTORY_STATUS");
        public final static Property SlaughterCapacity = new Property(28, String.class, "SlaughterCapacity", false, "SLAUGHTER_CAPACITY");
        public final static Property Butchery_id = new Property(29, String.class, "butchery_id", false, "BUTCHERY_ID");
        public final static Property Signature_src = new Property(30, String.class, "signature_src", false, "SIGNATURE_SRC");
    };


    public EntityAnimalSlaughterImmuneApplyDao(DaoConfig config) {
        super(config);
    }
    
    public EntityAnimalSlaughterImmuneApplyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_ANIMAL_SLAUGHTER_IMMUNE_APPLY' (" + //
                "'INNERID' TEXT," + // 0: innerid
                "'APPLY_USER_NAME' TEXT," + // 1: apply_user_name
                "'APPLY_TIME' TEXT," + // 2: apply_time
                "'INSPECTION_STAFF' TEXT," + // 3: inspection_staff
                "'INSPECTION_STAFF_TELEPHONE' TEXT," + // 4: inspection_staff_telephone
                "'ANIMAL_TYPE' TEXT," + // 5: animal_type
                "'ANIMAL_COUNT' TEXT," + // 6: animal_count
                "'ANIMAL_ORIGIN' TEXT," + // 7: animal_origin
                "'ENTRANCE_IMMUNE_NUM' TEXT," + // 8: entrance_immune_num
                "'IS_SPECIAL_CHANNEL_IN' TEXT," + // 9: is_special_channel_in
                "'CLINIC_HEALTH' TEXT," + // 10: clinic_health
                "'IS_ANIMAL_EAR_TAG' TEXT," + // 11: is_animal_ear_tag
                "'TARGET_ADDRESS' TEXT," + // 12: target_address
                "'START_TRANS_TIME' TEXT," + // 13: start_trans_time
                "'IS_READ_WARN' TEXT," + // 14: is_read_warn
                "'CONFIRM_STATUS' TEXT," + // 15: confirm_status
                "'DO_CHECK_TIME' TEXT," + // 16: do_check_time
                "'DO_CHECK_ADDRESS' TEXT," + // 17: do_check_address
                "'REJECT_REASON' TEXT," + // 18: reject_reason
                "'CONFIRM_USER_NAME' TEXT," + // 19: confirm_user_name
                "'ADD__USER_ID' TEXT," + // 20: Add_UserID
                "'ADD__TIME' TEXT," + // 21: Add_Time
                "'ADD__IP' TEXT," + // 22: Add_IP
                "'UPDATE__USER_ID' TEXT," + // 23: Update_UserID
                "'UPDATE__TIME' TEXT," + // 24: Update_Time
                "'UPDATE__IP' TEXT," + // 25: Update_IP
                "'INVENTORY' TEXT," + // 26: Inventory
                "'INVENTORY_STATUS' TEXT," + // 27: InventoryStatus
                "'SLAUGHTER_CAPACITY' TEXT," + // 28: SlaughterCapacity
                "'BUTCHERY_ID' TEXT," + // 29: butchery_id
                "'SIGNATURE_SRC' TEXT);"); // 30: signature_src
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_ANIMAL_SLAUGHTER_IMMUNE_APPLY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityAnimalSlaughterImmuneApply entity) {
        stmt.clearBindings();
 
        String innerid = entity.getInnerid();
        if (innerid != null) {
            stmt.bindString(1, innerid);
        }
 
        String apply_user_name = entity.getApply_user_name();
        if (apply_user_name != null) {
            stmt.bindString(2, apply_user_name);
        }
 
        String apply_time = entity.getApply_time();
        if (apply_time != null) {
            stmt.bindString(3, apply_time);
        }
 
        String inspection_staff = entity.getInspection_staff();
        if (inspection_staff != null) {
            stmt.bindString(4, inspection_staff);
        }
 
        String inspection_staff_telephone = entity.getInspection_staff_telephone();
        if (inspection_staff_telephone != null) {
            stmt.bindString(5, inspection_staff_telephone);
        }
 
        String animal_type = entity.getAnimal_type();
        if (animal_type != null) {
            stmt.bindString(6, animal_type);
        }
 
        String animal_count = entity.getAnimal_count();
        if (animal_count != null) {
            stmt.bindString(7, animal_count);
        }
 
        String animal_origin = entity.getAnimal_origin();
        if (animal_origin != null) {
            stmt.bindString(8, animal_origin);
        }
 
        String entrance_immune_num = entity.getEntrance_immune_num();
        if (entrance_immune_num != null) {
            stmt.bindString(9, entrance_immune_num);
        }
 
        String is_special_channel_in = entity.getIs_special_channel_in();
        if (is_special_channel_in != null) {
            stmt.bindString(10, is_special_channel_in);
        }
 
        String clinic_health = entity.getClinic_health();
        if (clinic_health != null) {
            stmt.bindString(11, clinic_health);
        }
 
        String is_animal_ear_tag = entity.getIs_animal_ear_tag();
        if (is_animal_ear_tag != null) {
            stmt.bindString(12, is_animal_ear_tag);
        }
 
        String target_address = entity.getTarget_address();
        if (target_address != null) {
            stmt.bindString(13, target_address);
        }
 
        String start_trans_time = entity.getStart_trans_time();
        if (start_trans_time != null) {
            stmt.bindString(14, start_trans_time);
        }
 
        String is_read_warn = entity.getIs_read_warn();
        if (is_read_warn != null) {
            stmt.bindString(15, is_read_warn);
        }
 
        String confirm_status = entity.getConfirm_status();
        if (confirm_status != null) {
            stmt.bindString(16, confirm_status);
        }
 
        String do_check_time = entity.getDo_check_time();
        if (do_check_time != null) {
            stmt.bindString(17, do_check_time);
        }
 
        String do_check_address = entity.getDo_check_address();
        if (do_check_address != null) {
            stmt.bindString(18, do_check_address);
        }
 
        String reject_reason = entity.getReject_reason();
        if (reject_reason != null) {
            stmt.bindString(19, reject_reason);
        }
 
        String confirm_user_name = entity.getConfirm_user_name();
        if (confirm_user_name != null) {
            stmt.bindString(20, confirm_user_name);
        }
 
        String Add_UserID = entity.getAdd_UserID();
        if (Add_UserID != null) {
            stmt.bindString(21, Add_UserID);
        }
 
        String Add_Time = entity.getAdd_Time();
        if (Add_Time != null) {
            stmt.bindString(22, Add_Time);
        }
 
        String Add_IP = entity.getAdd_IP();
        if (Add_IP != null) {
            stmt.bindString(23, Add_IP);
        }
 
        String Update_UserID = entity.getUpdate_UserID();
        if (Update_UserID != null) {
            stmt.bindString(24, Update_UserID);
        }
 
        String Update_Time = entity.getUpdate_Time();
        if (Update_Time != null) {
            stmt.bindString(25, Update_Time);
        }
 
        String Update_IP = entity.getUpdate_IP();
        if (Update_IP != null) {
            stmt.bindString(26, Update_IP);
        }
 
        String Inventory = entity.getInventory();
        if (Inventory != null) {
            stmt.bindString(27, Inventory);
        }
 
        String InventoryStatus = entity.getInventoryStatus();
        if (InventoryStatus != null) {
            stmt.bindString(28, InventoryStatus);
        }
 
        String SlaughterCapacity = entity.getSlaughterCapacity();
        if (SlaughterCapacity != null) {
            stmt.bindString(29, SlaughterCapacity);
        }
 
        String butchery_id = entity.getButchery_id();
        if (butchery_id != null) {
            stmt.bindString(30, butchery_id);
        }
 
        String signature_src = entity.getSignature_src();
        if (signature_src != null) {
            stmt.bindString(31, signature_src);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityAnimalSlaughterImmuneApply readEntity(Cursor cursor, int offset) {
        EntityAnimalSlaughterImmuneApply entity = new EntityAnimalSlaughterImmuneApply( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // innerid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // apply_user_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // apply_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // inspection_staff
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // inspection_staff_telephone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // animal_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // animal_count
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // animal_origin
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // entrance_immune_num
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // is_special_channel_in
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // clinic_health
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // is_animal_ear_tag
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // target_address
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // start_trans_time
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // is_read_warn
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // confirm_status
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // do_check_time
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // do_check_address
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // reject_reason
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // confirm_user_name
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // Add_UserID
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Add_Time
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // Add_IP
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // Update_UserID
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // Update_Time
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // Update_IP
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // Inventory
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // InventoryStatus
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // SlaughterCapacity
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // butchery_id
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30) // signature_src
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityAnimalSlaughterImmuneApply entity, int offset) {
        entity.setInnerid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setApply_user_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApply_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInspection_staff(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInspection_staff_telephone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAnimal_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnimal_count(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAnimal_origin(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEntrance_immune_num(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIs_special_channel_in(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClinic_health(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIs_animal_ear_tag(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTarget_address(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStart_trans_time(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIs_read_warn(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setConfirm_status(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDo_check_time(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDo_check_address(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setReject_reason(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setConfirm_user_name(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAdd_UserID(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAdd_Time(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAdd_IP(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUpdate_UserID(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setUpdate_Time(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setUpdate_IP(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setInventory(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setInventoryStatus(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setSlaughterCapacity(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setButchery_id(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setSignature_src(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityAnimalSlaughterImmuneApply entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityAnimalSlaughterImmuneApply entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
