package com.websharp.dwtz.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.websharp.dwtz.dao.EntityCommonData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTITY_COMMON_DATA.
*/
public class EntityCommonDataDao extends AbstractDao<EntityCommonData, Void> {

    public static final String TABLENAME = "ENTITY_COMMON_DATA";

    /**
     * Properties of entity EntityCommonData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnerID = new Property(0, Integer.class, "InnerID", false, "INNER_ID");
        public final static Property Type = new Property(1, String.class, "Type", false, "TYPE");
        public final static Property ButcheryID = new Property(2, String.class, "ButcheryID", false, "BUTCHERY_ID");
        public final static Property DataValue = new Property(3, String.class, "DataValue", false, "DATA_VALUE");
        public final static Property Remark = new Property(4, String.class, "Remark", false, "REMARK");
        public final static Property Status = new Property(5, Integer.class, "Status", false, "STATUS");
    };


    public EntityCommonDataDao(DaoConfig config) {
        super(config);
    }
    
    public EntityCommonDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTITY_COMMON_DATA' (" + //
                "'INNER_ID' INTEGER," + // 0: InnerID
                "'TYPE' TEXT," + // 1: Type
                "'BUTCHERY_ID' TEXT," + // 2: ButcheryID
                "'DATA_VALUE' TEXT," + // 3: DataValue
                "'REMARK' TEXT," + // 4: Remark
                "'STATUS' INTEGER);"); // 5: Status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTITY_COMMON_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EntityCommonData entity) {
        stmt.clearBindings();
 
        Integer InnerID = entity.getInnerID();
        if (InnerID != null) {
            stmt.bindLong(1, InnerID);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(2, Type);
        }
 
        String ButcheryID = entity.getButcheryID();
        if (ButcheryID != null) {
            stmt.bindString(3, ButcheryID);
        }
 
        String DataValue = entity.getDataValue();
        if (DataValue != null) {
            stmt.bindString(4, DataValue);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(5, Remark);
        }
 
        Integer Status = entity.getStatus();
        if (Status != null) {
            stmt.bindLong(6, Status);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public EntityCommonData readEntity(Cursor cursor, int offset) {
        EntityCommonData entity = new EntityCommonData( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // InnerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ButcheryID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DataValue
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Remark
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // Status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EntityCommonData entity, int offset) {
        entity.setInnerID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setButcheryID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDataValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(EntityCommonData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(EntityCommonData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
